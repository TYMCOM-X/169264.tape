begin "SyfDpy - System Display Hack"

  require "(sailib)sail.def" source!file;
  require "sydisp.req" source!file;
  require "(sailib)dul.req" source!file;

define	MaxRow = 24;			! maximum row in screen array ;
define	CmdRow = MaxRow;		! row to display commands ;
define	MsgRow = MaxRow-1;		! row to display messages ;

define	DpyFrame  = 0;			! screen for normal display ;
define	DpyDisk   = DpyFrame  + 1;	! screen for disk display ;
define	DpyFRECOR = DpyDisk   + 1;	! screen for FRECOR display ;
define	DpyTtyTab = DpyFRECOR + 1;	! terminal information ;
define	DpyHelp   = DpyTtyTab + 1;	! screen for help text ;
define	DpyMax    = DpyHelp;		! maximum screen count ;

define Msg(x,y,text) = {Install(BP_point(7,Buffer[x,y],-1),text)};
define Node(x) = {( ((x lsh -10) land '7700) lor ((x lsh -8) land '77) )};

define	calli!GETTAB =	'41
,	calli!VPEEK = -'136
;

define	NoSKIP = { if (not !skip! ) then return( false ) }
,	PEEK(x) = { Calli( !bit(0) lor (x), calli!VPEEK ) }
,	Gettab( idx, tbl ) = {( calli( !xwd( idx, tbl ), calli!GETTAB ) )}
;

! system location definitions - see UUOSYM.DEF, COMMOD/COMMON.MAC
;

define	!gtINA=-'55		! inactivity timer (minutes) ;
,	!gtFTR=-'54		! frame tree info ;
,	!gtUID=-'53		! universal ID ;
,	!gtPNO=-'52		! program number ;
,	!gtBIO=-'41		! bio chars xmitted ;
,	!gtBET=-'40		! bio elapsed seconds ;
,	!gtLIN=-'27		! tty name in sixbit ;
,	!gtJOB=-'26		! frame owning this port ;
,	!gtFPN=-'25		! program PPN ;
,	!gtLOG=-'24		! LDBLOG(U) ;
,	!gtAUN=-'23		! logged in PPN ;
,	!gtUNM=-'22		! username 1-6 ;
,	!gtUN1=-'21		! username 7-12 ;
,	!gtLIC=-'20		! process license,,frame license ;
,	!gtCNK=-'12		! attach time ;
,	!gtSTS='0		! frame status ;
,	!gtPPN='2		! frame ppn (GFD) ;
,	!gtNAM='3		! program name ;
,	!gtTR1='4		! low order TRUs * 10^4 ;
,	!gtPRV='6		! frame privilege word ;
,	!gtSWP='7		! program core ;
,	!gtTTY='10		! TTYTAB(J) ;
,	!gtCNF='11		! CONFIG ;
,	  !CNSIZ='12		! monitor size ;
,	  !CNDEV='14		! lh = addr of first ddb ;
,	  !CNNJB='15		! largest frame # + 1 ;
,	  !CNSTS='17		! states word ;
,	  !CNSER='20		! cpu serial number ;
,	  !CNFRE='22		! frecore pointer -n,,fretab ;
,	  !CNPTS='24		! number of ports ;
,	  !CNJPS='26		! number jiffies / sec ;
,	!gtNSW='12		! NON-SWAP. ;
,	  !NSUPT='15		! uptime in jiffies ;
,	  !NSHJB='20		! highest job assigned ;
,	  !NSMMS='23		! physical memory size ;
,	  !NSNMN='35		! null ticks during last min ;
,	!gtSLF='23		! NUMTAB(I) ;
,	!gtWSC='25		! wait state codes ;
;

! system internal definitions - subject to change
;

define
	ddbNAM='0		! device name ;
,	ddbJOB='1		! job in bits 0-6 ;
,	ddbNXT='3		! lh=next ddb, rh=dispatch ;
,	ddbMOD='4		! characteristics ;
,	  dvTTY='10000000	! '10 in lh, is a tty ;
,	  dvATT='20000000000	! '20000 in lh, tty attached ;
,	ddbLDB='13		! lh=last ddb, rh=ldb pointer ;

,	ldbDDB='0		! rh=addr of attached ddb ;
,	ldbLIN='1		! (28-35) ldplno - port number ;
,	ldbTCB='4		! (pty) changed characteristics ;
,	ldbBIO='5		! (bio) output buffer,,input buffer ;
,	ldbBKI='7		! char-bk2 since ^U,,chari since ^U ;
,	ldbTIC='12		! chars in input buffer ;
,	ldbECC='14		! chars in echo buffer ;
,	ldbBKC='15		! bk chars  echo,,input ;
,	ldbBK2='16		! bk2 chars echo,,input ;
,	ldbTOC='21		! chars in output buffer ;
,	ldbRBC='25		! rubout echo characters ;
,	ldbLOG='26		! tymnet login data ;
,	ldbBYT='27		! random bytes ;
,	ldbMOD='30		! mode information ;
,	ldbDCH='31		! device characteristics (getlch) ;
,	ldbDCX='32		! more dev characteristics ;
,	ldbTTP='33		! sixbit terminal type ;
,	ldbSTR='34		! aux circuit string (39 chars) ;
,	strSize=(39+6) div 5	! word size of aux circuit string ;
;


! globals ;

boolean	Special,			! flag special bits on/off ;
	LdbInfo,			! true if LDB info is available ;
	DisplayIdle,			! true if showing idle time ;
	OnlyIdle,			! true if showing only idle jobs ;
	OnlyActive,			! true if showing only active jobs ;
	StillRunning;			! true while we're still going ;

integer	MyJob, MyPort,			! this frame number, port ;
	MyPriv,				! this frame's privileges ;
	MyLic,				! this frame's license ;
	MyAun,				! this frame's logged in PPN ;
	MyLine,				! this frame's line ;
	LinTab, TtyTab,			! monitor table addresses ;
	LdbPtr,				! LDB data locations ;
	Row, Col,			! current row, col within buffer ;
	BP, V, I,			! byte pointer, value, index ;
	ThisScreen,			! which display screen ;
	Offset, Page,			! offsets for what to display ;
	IdleTime,			! idle time cutoff variable ;
	LineCount,			! counter for displayed lines ;
	StartRow,			! row to start incrmental display ;
	CmdArg,				! command argument value ;
	SleepTime,			! seconds to sleep between scans ;
	Phy!Memory,			! size of physical memory ;
	Mon!Memory,			! size of monitor memory ;
	Mon!Ports,			! maximum # ports on system ;
	Mon!Jobs,			! maximum # jobs for system ;
	SerialNumber,			! serial number this cpu ;
	CPU!Tics,			! tics used last min ;
	CPU!TicsPerMin,			! tics per min this cpu ;
	FRECOR!Pointer,			! pointer to FRECOR bit table ;
	Total!FRECOR,			! frecore blocks allocated ;
	Free!FRECOR,			! frecore blocks available ;
	Used!FRECOR;			! frecore blocks in use ;

string State!Codes;			! string of state codes ;
string System, S;			! system name, scratch string ;
string CmdLine, MsgLine;		! text of cmd and msg lines ;

integer array Buffer[ 1:MaxRow, 1:27 ];	! screen buffer for redisplay ;

! Some utility routines
;

simple string procedure CVHMS( integer HMS );
begin
    string S;

    S_ cvs( HMS div 3600 ) & ":";
    HMS_ HMS mod 3600;
    S_ S & ( "0" & cvs( HMS div 60 ))[inf-1 to inf] & ":";
    HMS_ HMS mod 60;
    S_ S & ( "0" & cvs( HMS ))[inf-1 to inf];
    return( S );

end;


simple string procedure TMin( Integer Min );
begin "T Min"
    String S;

    S_ Null;
    if Min > 24*60 then begin
	S_ S& " "& cvs(Min%(24*60))& "d";
	Min_ Min mod (24*60);
    end;
    if Min > 60 then begin
	S_ S& " "& cvs(Min%60)& "h";
	Min_ Min mod 60;
    end;
    if Min
     then S_ S& " "& cvs(Min)& "m";

    return( ("          " & S)[inf-9 to inf] );
end "T Min";

! Utility routine to put a string into the buffer
;

simple integer procedure Install( integer BP; string S );
begin "install string"

    while ( length( S )) do idpb( lop( S ), BP );
    return( BP );

end "install string";

! screen section display routine
;

simple procedure Section( string Str, Head( NULL ); integer AddCol( 0 ) );
begin "section"

    if ( Offset < (LineCount_ LineCount+1) leq (Offset+(MsgRow-StartRow)) )
     then begin "print string"

	Msg( Row, Col, Str );

	if ( MsgRow = Row_ Row + 1 )
	 then if ( AddCol )
		then begin "reset coordinates"

		    Col_ Col + AddCol;
		    Row_ StartRow;
		    LineCount_ Offset;

		    if ( length( Head ) )
		     then Msg( StartRow-1, Col, Head );

		end "reset coordinates";

     end "print string";

end "section";

simple string procedure ShowInfo( Integer Arg );
begin

    return(("    " & Cvos( Node(Arg) ))[inf-4 to inf] &
	   "-" & (Cvos(Arg land '177) & "   ")[1 for 3] &
	   " Tid: " & ("  " & Cvos((Arg lsh -24) land '17))[inf-1 to inf] &
	   (If Arg land !bit(1) then " Z" else "  ") &
	   (If Arg land !bit(2) then  "G" else  " ") &
	   (If Arg land !bit(6) then  "H" else  " ")    );
end;


! display initialization ;

simple procedure InitSysDpy;
begin "initialization"

    if ( not ( Gettab( -1, !gtLIC ) land !bit(3) ))
     then usererr( 0,0,"Requires SY", "x" );

    MyPriv_ Gettab( -1, !gtPRV );
    MyLic_  Gettab( -1, !gtLIC );
    MyAun_  Gettab( -1, !gtAUN );

    T!Init;
    R!Init;

    CPU!TicsPerMin_ Gettab( !CNJPS, !gtCNF ) * 60;

    System_ cvstr( Gettab( 0,!gtCNF )) & cvstr( Gettab( 1,!gtCNF )) &
	    cvstr( Gettab( 2,!gtCNF )) & cvstr( Gettab( 3,!gtCNF )) &
	    cvstr( Gettab( 4,!gtCNF ));
    while ( length( System ) and ( System[inf for 1] = 0 ) )
     do System_ System[1 to inf-1];

    SerialNumber_ Gettab( !CNSER, !gtCNF );
    Mon!Jobs_     Gettab( !CNNJB, !gtCNF );
    Mon!Ports_    Gettab( !CNPTS, !gtCNF );
    Mon!Memory_   Gettab( !CNSIZ, !gtCNF ) div 512;
    Phy!Memory_   Gettab( !NSMMS, !gtNSW ) div 512;

    TtyTab_ !rh( Gettab(!gtTTY,!gtSLF) );	! address of TTYTAB ;
    FRECOR!Pointer_ Gettab( !CNFRE, !gtCNF );	! free core bit table ;
    Offset_ 0;  Page_ 14;

    StillRunning_ true;
    Special_ false;
    DisplayIdle_ false;
    OnlyActive_ OnlyIdle_ false;
    CmdArg_ IdleTime_ 0;
    SleepTime_ 5;

    ThisScreen_ DpyFrame;	! 0=jobs, 1=disk, 2=frecor, ... ;
    CmdLine_ NULL;
    MsgLine_ "Type ? for Help";

    State!Codes_ Null;
    I_ -1;
    while ( true )
     do begin "get state codes"
	V_ Gettab( I_ I + 1, !gtWSC );
	if not( !skip! )
	 then done
	 else State!Codes_ State!Codes & CvXstr( V );
     end "get state codes";

    LinTab_ !rh( Gettab( !gtLOG, !gtSLF ) );	! address of GTLOG code ;
    if ( !skip! )
     then begin "setup lintab"
	LinTab_ PEEK( LinTab );			! Read code, check it. ;
	If ( !lh( LinTab ) = '260040 )		!   PUSHJ P,......     ;en begin
	    LinTab_ PEEK( !rh(LinTab)+4 );	! Read code, check it. ;
	    If ( !lh(LinTab) = '334245 )	!   SKIPA U,LINTAB(U)  ;
	     then LinTab_ !rh( LinTab );	! Save value of LINTAB ;
	 end
	 else LinTab_ 0;
     end "setup lintab"
     else LinTab_ 0;


end "initialization";

! Install information about the system
;

simple procedure InstallSystemInfo;
begin "install system info"
    string S;

    S_ System;
    If ( SerialNumber )
     then S_ S & " #" & Cvs( SerialNumber );

    S_ S & "  " & CVHMS( call( 0, "MSTIME" ) div 1000 )
       & " Up " & CVHMS( Gettab(!NSUPT,!gtNSW) div 60 );
    Msg( 1, 1, S );

! ** Line 2 ** ;
! Memory size ;

    S_ Cvs( Phy!Memory ) & " pages, Sys(" & Cvs( Mon!Memory ) &
	") User(" & Cvs( Phy!Memory - Mon!Memory ) & ")";
    Msg( 2, 1, S );

! Ports ;
!    S_ S & "  " & Cvs( Mon!Ports ) & " ports";

! Status - Active,Idle,Normal - May be overwritten by Jobs ;
    S_ If OnlyActive then "Active" else
	If OnlyIdle then " Idle" else "Normal";
    Msg( 2, 11, S );

! Jobs ;

    V_ 0;
    For I_ 1 step 1 until Mon!Jobs
     do If ( Gettab( I, !gtSTS ) land !bit(3) )	! JNA ;
	 then V_ V + 1;

    S_ "Frames: " & Cvs( V ) & ":" & Cvs( Mon!Jobs );
    Msg( 2, 8, S );

! CPU info ;

    CPU!Tics_ CPU!TicsPerMin - Gettab( !NSNMN, !gtNSW );
    V_ ( CPU!Tics * 100 ) div CPU!TicsPerMin;
    S_ "CPU" & ("  "&cvs(V))[inf-2 to inf] & "% ";
    V_ (CPU!Tics * 10) div CPU!TicsPerMin;
    S_ S & ("::::::::::"[1 for V] & "..........")[1 for 10];
    Msg( 2, 13, S );

  end "install system info";

! Install information about selected jobs

;

simple procedure DisplayJobInfo;
begin "display job info"
    integer Job, HiJob, AllJob, AllCore, JobLOG, JobCore;    string S;
    integer JobStatus, JobPriv, JobAUN, JobGFD, JobTRU, JobTTY, JobIdle;

    StartRow_ Row_ 4;  Col_ 1;

    MsgLine_ "Type ? for Help";

    HiJob_ Gettab( !NSHJB, !gtNSW );
    If ( HiJob = !Xwd( !NSHJB, !gtNSW ) )
     then HiJob_ Mon!Jobs;

    LineCount_ AllJob_ AllCore_ 0;
    for Job_ 1 upto HiJob do
      begin "each job slot"

	JobStatus_ Gettab( Job, !gtSTS );
	if ( not ( JobStatus land !bit(3) ))	! jna = 0 ? ;
	 then continue "each job slot";

	JobAUN_ Gettab( Job, !gtAUN );

	if ( not( ( MyAun = JobAun )		! same ppn ;
	     or   ( ( MyPriv land !bit(22) )	! acct-sup ;
	      and ( !rh(MyAun) = !rh(JobAun) ))	! same gan ;
	     or   ( MyLic land '241000 )	! RC SY JL ;
	        ) )
	 then continue "each job slot";

	AllJob_ AllJob + 1;

	JobCore_ Gettab( Job, !gtSWP ) land '777;
	AllCore_ AllCore + JobCore;

	JobIdle_ !rh( Gettab( Job, -'55 ) );
	If ( ( OnlyActive ) and ( JobIdle > IdleTime ) )
	  or ( ( OnlyIdle ) and ( JobIdle < IdleTime ) )
	 then continue "each job slot";


	JobGFD_  Gettab( Job, !gtPPN );
	JobTRU_  Gettab( Job, !gtTR1 ) div 100;
	JobPriv_ Gettab( Job, !gtPRV );
	JobTTY_  Gettab( Job, !gtLIN );

	start!code
	    define uuo!frmop = '044 lsh 27;

		Movei 1,JobLOG;		! address of arg ;
		Hrli  1,1;		! attr # 1 = UPTLOG ;
		Movem 1,JobLOG;		! store for frmop ;
		Move  1,Job;		! job # ;
		Hrli  1,'36;		! .forfa,,job ;
		uuo!frmop 1,JobLOG;	! read attribute ;
		 setzm JobLOG;		! oops ;
	end;

	! job tty program name ;

	S_ (cvs(Job)&"    ")[1 to 4] &
	    (If ( JobTTY = Cvsix( "   TTY" ) )
		then "detached        "
		else (If !lh(JobTTY) then "#" else "d")
			& cvxstr( JobTTY lsh 18 )[1 for 4]
			& ("    " & Cvos( Node(JobLOG) ))[inf-4 to inf]
			& "-" & (Cvos(JobLOG land '177) & "     ")[1 for 5]
		) &
	    cvxstr( Gettab( Job, !gtNAM )) & "  ";

	! size in pages.  (uses incorrectly documented gettab) ;

	S_ S & (cvs(JobCore)&"  ")[1 for 3] & " ";

	! status ;

	V_ (JobStatus lsh -21) land '37;
	if (( V = 0 ) and not ( JobStatus land !bit(0))) then
	  S_ S & "^C"
	else
	  S_ S & State!Codes[ (V*2+1) for 2 ];

	! SCHPRV hack ;

	S_ S & ( If (JobStatus land !bit(23)) then " ?" else "  " );

	If ( DisplayIdle )
	 then "show idle time"
	    If ( JobIdle )
	     then S_ S & TMin( JobIdle ) & "  "
	     else S_ S & "            "
	 else "show TRUs"
	    S_ S & ("       "&cvs( JobTRU div 100 ))[inf-6 to inf] & "." &
		 ("0"&cvs( JobTRU mod 100 ))[inf-1 to inf] & "  ";

	! user name ;
	
	S_ S & cvxstr( Gettab( Job, !gtUNM )) &
		 cvxstr( Gettab( Job, !gtUN1 ));
	while ( length( S ) and ( S[inf for 1] = " " )) do
	  S_ S[1 to inf-1];

	! GFD'd username ;

	if ( JobAUN neq JobGFD ) then
	  S_ S & " (" & CVUser( JobGFD ) & ")";
	S_ S & " ";

	! other misc stuff ;

	if ( JobPriv land (!Bit(8)+!Bit(23))) then S_ S & "*";
	if ( JobPriv land !bit(21)) then S_ S & "+";
	if ( JobPriv land !bit(18)) then S_ S & "$";

	if ( ( Special ) and ( MyLic land '241000 ) )	! RC SY JL ;
	 then begin "special stuff"
	    if ( JobStatus land !bit(17) ) then S_ S & " JAC";
	    if ( JobStatus land !bit(20) ) then S_ S & " JA2";
	    if ( JobStatus land !bit(29) ) then S_ S & " KJP";

	    if ( JobPriv land !bit(26) ) then S_ S & " RCM";
	    if ( JobPriv land !bit(10) ) then S_ S & " SCM";
	    if ( JobPriv land !bit( 9) ) then S_ S & " INA";
	 end "special stuff";

	Section( S );			! display the job info ;

      end "each job slot";

    If ( AllJob )
     then begin "print job totals"

	S_ "Users: " & (Cvs(AllJob) & "    ")[1 for 4] &
	   "Pages: " & (Cvs(AllCore) & "      ")[1 for 6];

	Msg( MsgRow, 9, S );

     end "print job totals";
    
end "display job info";

! Install disk info
;

simple procedure DisplayDisk;
begin "install disk info"
    own safe integer array DskChrBlk[ 0 : '22 ];
    integer Unit, DskChrBits, FreePages;
    string S, Head;

    LineCount_ 0;  StartRow_ Row_ 5;  Col_ 1;

    Msg( 4, Col, Head_ "Disk   Free % Full" );

    Unit_ FreePages_ 0;
    while ( true ) do
      begin "every unit";
	DskChrBlk[0]_ cvsix( "DSKB" & cvos( Unit ) );

	start!code
	  setzm !skip!;
	  movei 1,access(DSKChrBlk[0]);
	  hrli 1,'23;
	  calli 1,'45;		! dskchr 1, ;
	    setom !skip!;
	  movem 1,DSKChrBits;
	end;

	if ( !skip! ) then done "every unit";

	V_ (( DSKChrBlk[6] - DSKChrBlk[3] ) * 10  ) div DSKChrBlk[6];

	FreePages_ FreePages + DSKChrBlk[3];

	S_  cvxstr( DSKChrBlk['15] )[1 for 5] &
	     ( "      " & cvs( DSKChrBlk[3] ))[ inf-5 to inf ] & " " &
	     ( "::::::::::"[ 1 for V ] & ".........." )[1 for 10];

	Section( S, Head, 5 );
	Unit_ Unit + 1;

      end "every unit";

    S_ "  Total Free = " & cvs( FreePages );

    Msg( MsgRow, 14, "Free: " & Cvs(FreePages) );

end "install disk info";

! Do FRECOR screen stuff
;

simple procedure DisplayFRECOR;
begin "display FRECOR"
    integer Size, Addr, Word, Here, There, W, D;
    string  S;

    PEEK( !rh( Gettab( !NSHJB,!gtNSW ) ) + '20 );
    If not( !skip! )
     then begin "Insufficient license"
	ThisScreen_ DpyFrame;
	MsgLine_ "Insufficient license";
	Return;
     end "Insufficient license";

    Size_ -( FRECOR!Pointer ash -18 );
    Addr_ !rh( FRECOR!Pointer );

    GetFormat( W, D ); SetFormat( 13, 0 );
    There_ Free!FRECOR_ Used!FRECOR_ 0;
    LineCount_ 0;  StartRow_ Row_ 5;  Col_ 1;
    S_ Null;

    For Here_ Addr step 1 until Addr+Size
     do begin "count bits"

	Word_ PEEK( Here );
	If not( !skip! )
	 then Done;

	S_ S & Cvos( Word );
	If ( 6 = There_ There + 1 )
	 then begin "install line"

	    Section( S );
	    S_ Null;
	    There_ 0;

	 end "install line";

	start!code "each word"
	    Label Loop;

	    Movei '13,36;	! set the count ;
	    Move  1,Word;	! get the word ;
      Loop: Skipl 1;		! test sign bit, skip if set ;
	    Aosa  Free!FRECOR;	!  not set, increment & skip ;
	    Aos   Used!FRECOR;	!  set so increment this one ;
	    Rot   '1,1;		! rotate for next check ;
	    Sojg  '13,Loop;	! try next bit until done ;

	 end "each word";

     end "count bits";

    If ( length( S ) )
     then Section( S );

    Total!FRECOR_ Free!FRECOR + Used!FRECOR;
    SetFormat( 5, 0 );

    S_  "Total " & Cvos(Total!FRECOR) &
	" = Used " & Cvos(Used!FRECOR) &
	" + Free " & Cvos(Free!FRECOR);

    SetFormat( W, D );

! FREPTR & screen-offset ;

    S_ S & "  FREPTR[ -" & Cvos( Size ) & ",," & Cvos( Addr );
    Msg( 3, 1, S );

    V_ ( Used!FRECOR * 100 ) div Total!FRECOR;
    S_ " FC" & ("  "&cvs(V))[inf-2 to inf] & "% ";
    S_ S & ("::::::::::"[1 for V div 10] & "..........")[1 for 10];
    Msg( 3, 13, S );

    Msg( 4, 1, "[" & Cvos( Offset*6 ) & "]" );

end "display FRECOR";

! tty / line display information
;

simple procedure DisplayTTYTAB;
begin "TTYTAB display"
    string Head;

    If not( LinTab )
     then begin "Insufficient license"
	ThisScreen_ DpyFrame;
	MsgLine_ "Insufficient license";
	Return;
     end "Insufficient license";

    LineCount_ 0;  StartRow_ Row_ 4;  Col_ 1;

    For MyJob_ 1 step 1 until Mon!Jobs
     do begin "print tty tree"
	Integer TheDdb, TheMod, TheJob, I;
	String AuxString, Str;

	TheDdb_ !rh( PEEK( TtyTab + MyJob ) );
	TheMod_ PEEK( TheDdb + ddbMOD );
	TheJob_ PEEK( TheDdb + ddbJOB ) lsh -29;

	If ( TheJob = MyJob ) and ( TheMod land dvTTY )
	 then S_ (CvS( MyJob ) & "     ")[1 for 5];

	While ( TheJob = MyJob ) and ( TheMod land dvTTY )
	 do begin "our tty"

	    MyLine_ PEEK( TheDdb );
	    If ( !lh( MyLine ) )
	     then begin
		LdbPtr_ PEEK( TheDdb + ddbLDB );
		AuxString_ Null;
		For I_ 0 upto strSize-1
		 do begin
		    Str_ CvAStr( PEEK(!rh(LdbPtr)+LdbStr+I) );
		    AuxString_ AuxString & Str;
		    If ( length( Str ) < 5 )
		     then done;
		 end;
		Section( S & (Cv6str(MyLine) & ":       ")[1 for 8] &
			 ShowInfo(PEEK(!rh(LdbPtr)+LdbLog)) &
			 (if length( AuxString )
			   then "  " & AuxString
			   else Null) );
	     end
	     else Section( S &
		(cv6str(Myline lor cvsix("det")) & ":       ")[1 for 8] );

	    TheDdb_ PEEK( TheDdb + ddbNXT ) lsh -18;
	    TheMod_ PEEK( TheDdb + ddbMOD );
	    TheJob_ PEEK( TheDdb + ddbJOB ) lsh -29;

	 end "our tty";

     end "print tty tree";

end "TTYTAB display";


ifcr false thenc
begin
    Section( Null, Head_ "-- Info by Port --", 5 );
    if ( Row neq StartRow )
     then Section( Head );

    For MyPort_ 0 step 1 until Mon!Ports
     do begin
	LdbPtr_ PEEK( LinTab + MyPort );
	If ( !lh(LdbPtr)= 0 )
	 then begin
	    MyLine_ Cvsix( "TTY" & cvos(MyPort) );
	    Section( ShowInfo( PEEK( !rh(LdbPtr) + LdbLog ) ), Head, 5 );
	 end;
     end;
end;
endc

! display a help message
;

procedure DisplayHelp;
begin "help me"

    arrclr( Buffer, cvasc("     ") );	! fill in the display ;

    Msg(  4,4, ["SY %2(6)  Command Summary"] );
    Msg(  6,4, ["? or H    Display this text"] );
    Msg(  7,4, ["A         Toggle active jobs display"] );
    Msg(  8,4, ["D         Display disk information"] );
    Msg(  9,4, ["F         Display FRECOR information"] );
    Msg( 10,4, ["I         Toggle idle jobs display"] );
    Msg( 11,4, ["L         Set page scroll size to ARG lines"] );
    Msg( 12,4, ["N         Display normal frame information"] );
    Msg( 13,4, ["S         Set sleep time to ARG seconds"] );
    Msg( 14,4, ["T         Toggle Idle time / TRU display"] );
    Msg( 15,4, ["Q or ^Z   Exit to monitor level (also ^C)"] );
    Msg( 16,4, ["+ or ^V   Scroll screen forward"] );
    Msg( 17,4, ["- or ^W   Scroll screen backward"] );
    Msg( 19,4, ["0 thru 9  Set argument value"] );

end "help me";


! Fill the buffer with text to be displayed
;

procedure SetupBuffer;
  begin "setup buffer"
    integer BP;

    arrclr( Buffer, cvasc("     ") );	! fill in the display ;

    Row_ 1;  Col_ 1;	InstallSystemInfo;

    Case ( ThisScreen )
     of begin "do right screen"
	[DpyFrame]  DisplayJobInfo;
	[DpyDisk]   DisplayDisk;
	[DpyFRECOR] DisplayFRECOR;
	[DpyTtyTab] DisplayTTYTAB;
	[DpyHelp]   DisplayHelp;
	[Else]      begin
		    end
     end "do right screen";

    Install( BP_ point( 7, Buffer[MsgRow,1], -1 ), MsgLine );
    Install( BP_ point( 7, Buffer[CmdRow,1], -1 ), CmdLine );
    
  end "setup buffer";

! Command Scanner
;

procedure CommandScan;
begin "command scan"
  integer C;

  while ( T!ChrP )
   do begin "get a character"

    C_ T!GetC;

    Case ( C )
     of begin "each character"

	[" "]
	    begin end;

	["C"-'100]["Z"-'100] ["Q"]["q"]
	    StillRunning_ false;
	[#CR][#Esc] begin
		MsgLine_ Null;
		CmdArg_ 0;
	     end;
	[#FF] begin
		arrclr( Buffer, cvasc("     ") );
		R!Disp( Buffer, true, 1, 1 );
	     end;
	["G"-'100]
	    Offset_ 0;

	["V"-'100] ["+"]
	    Offset_ Offset + Page;
	["W"-'100] ["-"]
	    Offset_ (Offset - Page) Max 0;
	["Y"-'100]
	    Special_ not Special;

	["?"]["H"]["h"]
	    ThisScreen_ DpyHELP;

	["0"]["1"]["2"]["3"]["4"]["5"]["6"]["7"]["8"]["9"]
	    CmdArg_ (CmdArg * 10) + (C - "0");
	["H"-'100]['177]
	    CmdArg_ CmdArg div 10;

	["A"]["a"]
	    If ( CmdArg )
	     then begin
		ThisScreen_ DpyFrame;
		IdleTime_ CmdArg;
		CmdArg_ 0;
		OnlyActive_ true;
	     end
	     else If ( OnlyActive_ not OnlyActive )
		   then OnlyIdle_ false;
	["D"]["d"] begin
		ThisScreen_ DpyDisk;
		Offset_ 0;
	     end;
	["F"]["f"] begin
		ThisScreen_ DpyFRECOR;
		Offset_ 0;
	     end;
	["I"]["i"]
	    If ( CmdArg )
	     then begin
		ThisScreen_ DpyFrame;
		IdleTime_ CmdArg;
		CmdArg_ 0;
		OnlyIdle_ true;
		OnlyActive_ false;
	     end
	     else if ( OnlyIdle_ not OnlyIdle )
		   then begin
		      ThisScreen_ DpyFrame;
		      OnlyActive_ false;
		      if ( IdleTime = 0 )
			then IdleTime_ 1;
		   end;
	["L"]["l"] begin
		Page_ CmdArg Min 18;
		CmdArg_ 0;
	     end;
	["N"]["n"] begin
		ThisScreen_ DpyFrame;
		OnlyActive_ OnlyIdle_ False;
		Offset_ IdleTime_ 0;
	     end;
	["P"]["p"] begin
		ThisScreen_ DpyTtyTab;
		Offset_ 0;
	     end;
	["S"]["s"] begin
		SleepTime_ CmdArg;
		CmdArg_ 0;
	     end;
	["T"]["t"]
	    DisplayIdle_ not DisplayIdle;

	[else] begin
		T!Bell;
		CmdArg_ 0;
		MsgLine_ "Type ? for Help";
	     end

	end "each character";

     end "get a character";

    if ( CmdArg )
     then CmdLine_ "Arg: " & Cvs( CmdArg )
     else CmdLine_ NULL;

  end "command scan";

! Routine to sleep for the specifed amount of time or until a
! break character arrives
;

procedure Snooze;
  begin

    if ( SleepTime ) then
      calli( !xwd( '31, SleepTime ), '72 );	! hiber ;

  end;
! Top level logic
;

  InitSysDpy;

  while ( StillRunning ) do    
    begin "main loop"

      SetupBuffer;

      R!Disp( Buffer, true, 1, 1 );

      if ( T!ChrP ) then
	CommandScan
      else
	Snooze;

    end "main loop";

  T!Fini;

  call(0,"EXIT");
    
end "SyfDpy - System Display Hack";
   9K