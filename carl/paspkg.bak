Entry

	GetLic, GetOpr, LicErr, LError, NamOpr
;
begin "XEXLIC"

require "(SAILIB)SAIL.DEF"   source!file;

define SystemDevice = {"SYS"};		! {"SYS"};

define
	ErrNone   =   0			! bad name or password ;
,	ErrInit   =   ErrNone + 1	! cannot init SYS ;
,	ErrFNF    =   ErrInit + 1	! oper file not found ;
,	ErrFML    =   ErrFNF  + 1	! oper file missing license ;
;


internal own integer LError;		! error code ;

string OPER!NAME;


internal simple string procedure LicErr( integer Code );
begin "license error"

    return( case ( code )
     of (
	[ErrNone] "bad name or password",
	[ErrInit] "cannot init SYS",
	[ErrFNF]  "oper file not found",
	[ErrFML]  "oper file missing license"
      )
    );

end "license error";


simple procedure MyText( string text; integer port(-1) );
begin

    start!code
	HRL	'1,Port;		! get port number ;
	HRRI	'1,'67;			! use .axOPC ;
	HRLI	'0,'042040;		! 'auxcal 1,' ;
	HRRI	'0,Text;		! address on stack of ptr ;
	SOJ	'0,;			! minus 1 = count ;
	XCT	'0;			! auxcal 1,block <count><ptr> ;
    end;

end;


simple string procedure get!line( integer port(-1) );
begin "G!L"
    integer I;
    string S;

    S _ null;

    do begin "get line"

	I _ auxclv(-1,0,'46);		! input a character;

	if I = '177 or I = '10		! rubout or backspace ;
	 then begin "allow rubout"
	    if ( length( S ) > 1 )	! more than 1 typed? ;
	     then S_ S[1 to inf-1]	! reduce by 1 ;
	     else S_ null;		! else reset to null ;
	    continue;			! get next character ;
	 end "allow rubout";

	if I geq '173 then done;	! these are line breaks (ugh);

	if I geq '140 then I_ I - '40;	! convert lower to upper case;
	if I geq '40  then S_ S & I;	! add to string if legal;

    end "get line" until I < '40;

    if I = #cr then auxclv(-1,0,'46);	! If CR then read the LF;
    auxclv(-1,0,'11);			! Try and get node to echo;

    return(S);

end "G!L";


simple integer procedure Radix.45( Integer Ch );
begin "Radix 45"

    if ( Ch = " " ) then return(  0 );

    if ( Ch geq "A" and Ch leq "Z" ) then return( Ch+1  - "A" );
    if ( Ch geq "a" and Ch leq "z" ) then return( Ch+1  - "a" );
    if ( Ch geq "," and Ch leq ":" ) then return( Ch+31 - "," );

    if ( Ch = "*" ) then return( 42 );
    if ( Ch = "'" ) then return( 43 );
    if ( Ch = "$" ) then return( 44 );

    return(  0 );

end "Radix 45";


simple string procedure OprNam( reference string procedure Line; integer Port(-1) );
begin "operator name"
    string S;

    while ( true )
     do begin "get name"

	MyText( "Oper name: ", Port );	! prompt first time or on "?" ;
	S_ Line( Port );		! read oper name ;
	if ( S = "?" )
	 then MyText( "Enter your name as it appears in the OPER"&
		      " license file."& crlf, Port)
	 else return( S );		! user may be stuck, so leave ;

     end "get name";

end "operator name";


internal procedure GetOpr( reference integer L; reference string Name;
			   integer Port(-1) );
begin "get oper"
    integer C;
    string  OperName;
    own safe integer array NM[0:1];

    if ( length( Name ) = 0  or  Name = "?" )
     then Name_ OprNam( Get!Line, Port );

    OperName _ (Name & "            ")[1 for 12];
    arrclr( NM );
    while ( length( OperName ) )	! make name reasonable ;
     do begin "translate"
	C _ Radix.45( Lop( OperName ) );
	start!code
	MOVE	3,NM[0];
	MOVE	1,NM[1];
	IMULI	3,45;
	MULI	1,45;
	ADD	1,3;
	ADD	2,C;
	DMOVEM	1,NM[0];
	end;
     end "translate";

    arrblt( L, NM[0], 2 );		! return result in array ;

end "get oper";


Define RadixChar = {" ABCDEFGHIJKLMNOPQRSTUVWXYZ,-./0123456789:*'$"};
Own safe integer array RadixByte[ 0:20 ];

internal string procedure NamOpr( reference integer Name );
begin "name of oper"
    string Str;
    integer RadixSize, Cnt;

    arrclr( RadixByte );		! clear name to spaces ;
    start!code
	define NM='13, NM1='14, NM2='15, PTR='1, P='17;
	label NAMPR, NAMPR1, NAMPRX;

NAMPR:	DMOVE	NM1,Name;		! copy name ;
	SETZB	PTR,RadixSize;		! to string area ;

	MOVE	NM,NM1;			! work register ;
NAMPR1:	IDIVI	NM,45;			! divide, remainder setup ;
	DIVI	NM1,45;			! divide remainder plus 2nd word ;
	MOVEM	NM2,RadixByte[0](PTR);	! remember letter ;
	AOS	PTR,RadixSize;		! count letters in name ;
	MOVE	NM2,NM1;		! reset low order part ;
	SKIPN	NM1;			! if any left ;
	SKIPE	NM;			! ........... ;
	  JRST	NAMPR1;			! loop through numbers ;
NAMPRX:
    end;

    Str_ null;
    For Cnt_ RadixSize-1 downto 0
     do Str_ Str & RadixChar[ RadixByte[ Cnt ]+1 for 1 ];

    return( Str );

end;



integer procedure CVHASH(string PW);
begin
  integer C,FIVES,T1,T2,T3,T4;
  integer array X[0:4];
  X[0] _ X[2] _ X[4] _ '555555555555;
  X[1] _ X[3] _ '361275431652;
  FIVES _ '343277244615;
  T3 _ 0;
  while length(PW) do begin "PSWLP"
    C _ lop(PW);
    X[0] _ X[0] + C;
    X[3] _ X[3] + C;
    T4 _ '40;
    do begin "RAND"
      T1 _ X[T3];
      start!code
	MOVE 1,T1;
	MUL 1,FIVES;
	MOVEM 1,T1;
	MOVEM 2,T2;
	end;
      T3 _ T3 + 1;
      X[T3] _ X[T3] + T2;
      if T3 = 4 then begin
	T3 _ X[4] lsh -'42;
	X[0] _ X[0] + X[4];
	end;
      end "RAND" until (T4_T4-1) leq 0;
    end "PSWLP";
  return(X[0]);
  end;


simple integer procedure LicPas( reference string procedure Line; integer Port(-1) );
begin "license password"
    string TMP;

    auxclr( Port, memory['200], '64 );	! Turn off echo;
    while ( true )
     do begin "prompt and read"
	MyText( "Password: ", Port );	! ask for password ;
	TMP_ Line( Port );		! get line (no echo ) ;
	if ( TMP = "?" )		! if "?" give help ;
	 then MyText( "?"& crlf & "Enter your password associated " &
		    "with the specified OPER name."& crlf,
		    Port )
	 else done;			!  else go on ;
     end "prompt and read";

    MyText( crlf, Port );
    auxclr( Port, memory[0], '64 );	! Turn on echo ;
    auxclv( Port, 0, '11);		! LevDef ;

    return( CvHash( TMP ) );		! return hashed password ;

end "license password";

require "(CARL)VMFILE.REQ"   source!file;

internal integer procedure GetLic( reference integer OperName, Hash );
begin "get license"
    safe integer array NAME[0:1];
    boolean NotSupplied;
    integer LIC,PTR,OP,BUF,PAG;

    define bomb (X,Y) = {begin
	if ( NotSupplied )		! no name given - interactive ;
	 then print( Y, crlf )		! give message and continue ;
	 else LError_ X;		! else set flag variable ;
	if ( OP > 0 )			! channel is open? ;
	 then VMFree( OP );		!  yes, so close it ;
	Oper!Name _ null;		! clear opername ;
	return(0) end};			! and goodbye ;
    define
	bfnm1 = 0,
	bfnm2 = 1,
	bfpsw = 2,
	bflic = 3;

    LError_ ErrNone;			! no license for this name ;

    if ( NotSupplied_ ( Hash = 0 ) )	! was a password provided ;
     then Hash_ LicPas(Get!Line, -1);	! no, get one ;

    OP_ VMFile( "("& SystemDevice &")DRWSPR.EPO", VM$Read );
    if ( OP < 0 )
     then bomb( ErrInit, "?Can't init password file");

    if not( VMGetC( OP,VM$Lic ) land '400000 )
     then bomb( ErrFML, "?OPER password file has no license");

    BUF_ VMGetC( OP, VM$Base ) lsh 9;	! remember base address ;
    PAG_ LIC_ 0;			! start clear at the beginning ;
    arrblt( Name[0], OperName, 2 );	! copy oper name in radix ;

    while ( VMPMap( OP, PAG_ PAG+1 ) )	! while file has pages ;
     do begin "SEARCH"			!  scan through them ;

	for PTR_ BUF step 7 until BUF+'770
	 do begin "TRY"
	    if memory[ PTR+bfnm1 ] neq Name[0]
	     then continue "TRY";
	    if memory[ PTR+bfnm2 ] neq Name[1]
	     then continue "TRY";
	    if ( ( Hash = -1 ) or ( memory[ PTR+bfpsw ] = Hash ) )
	     then begin "get it"
		LIC_ memory[ PTR+bflic ];
		done "SEARCH";
	     end "get it";
	 end "TRY";

     end "SEARCH";

    VMFree(OP);
    if ( LIC = 0 )
     then begin
	if ( NotSupplied )
	 then print("?Bad name or password",crlf)
	 else LError_ ErrNone;
     end;

    return(LIC);

end "get license";


end "XEXLIC";
   